C# is a powerful, object-oriented programming language developed by Microsoft, primarily used for building .NET applications, 
web applications, game development, and enterprise solutions.

using System; â†’ Includes standard libraries.
In C#, using System; is a directive that allows access to the System namespace, which contains fundamental types and classes
essential for C# development. Without it, you'd have to use fully qualified names (e.g., System.Console.WriteLine instead of
just Console.WriteLine). using System; provides access to fundamental functionalities in C#.
It includes essential types like Console, Math, DateTime, Random, Exception, List<T>, File, and Threading.
Without using System;, youâ€™d need to fully qualify each class (System.Console.WriteLine() instead of Console.WriteLine()).

Collections in C# are data structures that allow you to store, manage, and manipulate groups of objects. The System.Collections 
and System.Collections.Generic namespaces provide various collection classes optimized for different use cases.
C# collections are broadly categorized into:

1. Non-Generic Collections (System.Collections)
    These collections store elements as object type, which means they can hold any type but require boxing and unboxing, making them less efficient.

            Collection	Description
            ArrayList	Dynamic array (like List<T> but stores object)
            Hashtable	Key-value pairs with fast lookup
            Queue	First-In-First-Out (FIFO) data structure
            Stack	Last-In-First-Out (LIFO) data structure
            SortedList	Sorted collection of key-value pairs

2. Generic Collections (System.Collections.Generic)
    Generic collections store specific data types, avoiding boxing/unboxing and improving performance.

            Collection	             Description
            List<T>	             Dynamic array (replaces ArrayList)
            Dictionary<TKey, TValue> Key-value pairs (like Hashtable)
            Queue<T>	             FIFO queue
            Stack<T>	             LIFO stack
            SortedList<TKey, TValue> Sorted key-value pairs
            LinkedList<T>	     Doubly linked list
            HashSet<T>	             Stores unique elements, unordered
            SortedSet<T>	     Stores unique elements, sorted

3. Concurrent Collections (System.Collections.Concurrent)
    These are thread-safe collections designed for multithreading.

            Collection	                        Description
            ConcurrentBag<T>	                Unordered collection allowing duplicates
            ConcurrentQueue<T>	                Thread-safe queue (FIFO)
            ConcurrentStack<T>	                Thread-safe stack (LIFO)
            ConcurrentDictionary<TKey, TValue>	Thread-safe key-value store
            BlockingCollection<T>	        Thread-safe producer-consumer collection

4. Immutable Collections (System.Collections.Immutable)
    Immutable collections cannot be modified after creation. Useful for functional programming.

            Collection	                        Description
            ImmutableList<T>	                Read-only list
            ImmutableDictionary<TKey, TValue>	Read-only dictionary
            ImmutableQueue<T>	                Read-only queue
            ImmutableStack<T>	                Read-only stack
            
    ðŸ“Œ Requires NuGet package: System.Collections.Immutable


  
-- SELECT first_name, age
-- FROM Customers where first_name like "%_o%";

-- select * from Customers order by customer_id limit 2 ; // for top 2 record
-- select * from Customers order by customer_id desc limit 2 ; // for bottom 2
-- select * from Customers where last_name like "d%"; // starts with d
-- select * from Customers where last_name like "%a"; // ends with a
-- select * from Customers where age>30 ; //  show record where age 30
-- select * from Customers where age between 20 And 30; // show record between 20 and 30;
-- select count(country) from customers  where age >30; //  return the count of record having age >30 based on name column


